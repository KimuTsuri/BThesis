
#include "B4DetectorConstruction.hh"

#include "G4Material.hh"
#include "G4NistManager.hh"

#include "G4Box.hh"
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4PVReplica.hh"
#include "G4GlobalMagFieldMessenger.hh"
#include "G4AutoDelete.hh"

#include "G4GeometryManager.hh"
#include "G4PhysicalVolumeStore.hh"
#include "G4LogicalVolumeStore.hh"
#include "G4SolidStore.hh"

#include "G4MagneticField.hh"
#include "G4UniformMagField.hh"
#include "G4FieldManager.hh"
#include "G4TransportationManager.hh"

#include "G4VisAttributes.hh"
#include "G4Colour.hh"

#include "G4PhysicalConstants.hh"
#include "G4SystemOfUnits.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B4DetectorConstruction::B4DetectorConstruction()
{
  //
  // Magnetic field
  //
  static G4TransportationManager* trMgr
    = G4TransportationManager::GetTransportationManager();

  G4FieldManager* globalFieldMgr = trMgr->GetFieldManager();

  static G4bool fieldIsInitialized = false;
  if(!fieldIsInitialized)
    {
      G4MagneticField* myField;
      G4ThreeVector fieldVector(1.*tesla, 0., 0.);

      myField = new G4UniformMagField( fieldVector );
      globalFieldMgr->SetDetectorField(myField);
      globalFieldMgr->CreateChordFinder(myField);
    }
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B4DetectorConstruction::~B4DetectorConstruction()
{ 
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* B4DetectorConstruction::Construct()
{
  DefineMaterials();
  return DefineVolumes();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void B4DetectorConstruction::DefineMaterials()
{ 
  auto nistManager = G4NistManager::Instance();
  nistManager->FindOrBuildMaterial("G4_Si");
  nistManager->FindOrBuildMaterial("G4_Al");
  nistManager->FindOrBuildMaterial("G4_Se");

  G4double Galactic_z;
  G4double Galactic_a;
  G4double Galactic_density;
  new G4Material("Galactic",
		 Galactic_z=1.,
		 Galactic_a=1.01*g/mole,
		 Galactic_density= universe_mean_density,
		 kStateGas, 2.73*kelvin, 3.e-18*pascal);

  G4cout << *(G4Material::GetMaterialTable()) << G4endl;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* B4DetectorConstruction::DefineVolumes()
{
  G4int nofLayers = 100;
  G4double absoThickness = 1.5*mm;
  G4double filmThickness = 0.01*mm;
  G4double calorSizeXY  = 100.*cm;
  G4double isoThickness = 0.01*mm;
  G4double isoSizeXY = 100.*cm;
  G4double empty_Si = 0.05*mm;
  G4double empty_Se = 0.5*mm;

  auto block_Si = 2*filmThickness + absoThickness;
  auto layerThickness = 2*block_Si + 2*empty_Si + 2*empty_Se + isoThickness;
  auto calorThickness = nofLayers * layerThickness;
  auto worldSizeXY = 1000 * calorSizeXY;
  auto worldSizeZ  = 1000 * calorThickness;

  auto defaultMaterial = G4Material::GetMaterial("Galactic");
  auto absorberMaterial = G4Material::GetMaterial("G4_Si");
  auto filmMaterial = G4Material::GetMaterial("G4_Al");
  auto isotopeMaterial = G4Material::GetMaterial("G4_Se");
  
  if ( ! defaultMaterial || ! absorberMaterial || ! filmMaterial ) {
    G4ExceptionDescription msg;
    msg << "Cannot retrieve materials already defined."; 
    G4Exception("B4DetectorConstruction::DefineVolumes()",
      "MyCode0001", FatalException, msg);
  }  
   
  //     
  // World
  //
  auto worldS 
    = new G4Box("World",           // its name
                 worldSizeXY/2, worldSizeXY/2, worldSizeZ/2); // its size
                         
  auto worldLV
    = new G4LogicalVolume(
                 worldS,           // its solid
                 defaultMaterial,  // its material
                 "World");         // its name
                                   
  auto worldPV
    = new G4PVPlacement(
                 0,                // no rotation
                 G4ThreeVector(),  // at (0,0,0)
                 worldLV,          // its logical volume                         
                 "World",          // its name
                 0,                // its mother  volume
                 false,            // no boolean operation
                 0,                // copy number
                 fCheckOverlaps);  // checking overlaps 
  
  //                               
  // Calorimeter
  //  
  auto calorimeterS
    = new G4Box("Calorimeter",     // its name
                 calorSizeXY/2, calorSizeXY/2, calorThickness/2); // its size
                         
  auto calorLV
    = new G4LogicalVolume(
                 calorimeterS,     // its solid
                 defaultMaterial,  // its material
                 "Calorimeter");   // its name
                                   
  new G4PVPlacement(
                 0,                // no rotation
                 G4ThreeVector(),  // at (0,0,0)
                 calorLV,          // its logical volume                         
                 "Calorimeter",    // its name
                 worldLV,          // its mother  volume
                 false,            // no boolean operation
                 0,                // copy number
                 fCheckOverlaps);  // checking overlaps 
   
  //                                 
  // Layer
  //
  auto layerS 
    = new G4Box("Layer",           // its name
                 calorSizeXY/2, calorSizeXY/2, layerThickness/2); // its size
                         
  auto layerLV
    = new G4LogicalVolume(
                 layerS,           // its solid
                 defaultMaterial,  // its material
                 "Layer");         // its name

  new G4PVReplica(
                 "Layer",          // its name
                 layerLV,          // its logical volume
                 calorLV,          // its mother
                 kZAxis,           // axis of replication
                 nofLayers,        // number of replica
                 layerThickness);  // witdth of replica
  
  //                               
  // Absorber
  //
  auto absorberS 
    = new G4Box("Abso",            // its name
                 calorSizeXY/2, calorSizeXY/2, absoThickness/2); // its size
                         
  auto absorberLV
    = new G4LogicalVolume(
                 absorberS,        // its solid
                 absorberMaterial, // its material
                 "Abso");          // its name
  
  fAbsorberPV
    = new G4PVPlacement(
                 0,                // no rotation
		 G4ThreeVector(0.,0.,-(isoThickness/2+empty_Se+filmThickness+absoThickness/2)),  // at (0,0,0)
		 absorberLV,       // its logical volume                         
                 "Abso",           // its name
                 layerLV,          // its mother  volume
                 false,            // no boolean operation
                 0,                // copy number
                 fCheckOverlaps);  // checking overlaps

    fAbsorberPV
      = new G4PVPlacement(
			  0,                // no rotation
			  G4ThreeVector(0.,0.,isoThickness/2+empty_Se+filmThickness+absoThickness/2),  // at (0,0,0)
			  absorberLV,       // its logical volume
			  "Abso",           // its name
			  layerLV,          // its mother  volume
			  false,            // no boolean operation
			  1,                // copy number
			  fCheckOverlaps);  // checking overlaps

  //                               
  // Filem
  //
  auto filmS 
    = new G4Box("Film",             // its name
                 calorSizeXY/2, calorSizeXY/2, filmThickness/2); // its size
                         
  auto filmLV
    = new G4LogicalVolume(
                 filmS,             // its solid
                 filmMaterial,      // its material
                 "Film");           // its name

    fFilmPV
      = new G4PVPlacement(
			  0,                // no rotation
			  G4ThreeVector(0., 0., -(isoThickness/2+empty_Se+filmThickness/2)), // its position
			  filmLV,            // its logical volume
			  "FilmIn",            // its name
			  layerLV,          // its mother  volume
			  false,            // no boolean operation
			  0,                // copy number
			  fCheckOverlaps);  // checking overlap
      fFilmPV
	= new G4PVPlacement(
			    0,                // no rotation
			    G4ThreeVector(0., 0., -(isoThickness/2+empty_Se+block_Si-filmThickness/2)), // its position
			    filmLV,            // its logical volume
			    "FilmOut",            // its name
			    layerLV,          // its mother  volume
			    false,            // no boolean operation
			    0,                // copy number
			    fCheckOverlaps);  // checking overlaps
                                   
  fFilmPV
    = new G4PVPlacement(
                 0,                // no rotation
                 G4ThreeVector(0., 0., isoThickness/2+empty_Se+filmThickness/2), // its position
                 filmLV,            // its logical volume                         
                 "FilmIn",            // its name
                 layerLV,          // its mother  volume
                 false,            // no boolean operation
                 0,                // copy number
                 fCheckOverlaps);  // checking overlap
  fFilmPV
    = new G4PVPlacement(
		 0,                // no rotation
                 G4ThreeVector(0., 0., isoThickness/2+empty_Se+block_Si-filmThickness/2), // its position
		 filmLV,            // its logical volume
		 "FilmOut",            // its name
		 layerLV,          // its mother  volume
		 false,            // no boolean operation
		 0,                // copy number
		 fCheckOverlaps);  // checking overlaps
  //
  // Isotope
  //
      auto isotopeS
	= new G4Box("Isotope",             // its name
		    isoSizeXY/2, isoSizeXY/2, isoThickness/2); // its size
          auto isotopeLV
	    = new G4LogicalVolume(
				  isotopeS,             // its solid
				  isotopeMaterial,      // its material
				  "Isotope");           // its name
	      fIsotopePV
		= new G4PVPlacement(
				    0,                // no rotation
				    G4ThreeVector(0., 0.,0.), // its position
				    isotopeLV,            // its logical volume
				    "Isotope",            // its name
				    layerLV,          // its mother  volume
				    false,            // no boolean operation
				    0,                // copy number
				    fCheckOverlaps);
  
  // Visualization attributes
  worldLV->SetVisAttributes (G4VisAttributes::GetInvisible());

  auto simpleBoxVisAtt= new G4VisAttributes(G4Colour(1.0,1.0,1.0));
  simpleBoxVisAtt->SetVisibility(true);
  calorLV->SetVisAttributes(simpleBoxVisAtt);

  return worldPV;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
